/**
 * SQL Database Schema Documentation
 *
 * This documentation outlines the structure of the database schema used for storing
 * combinations, responses, items, and the relationships between them.
 */
/**
 * Table: combinations
 *
 * This table stores unique combinations generated by the CombinationService.
 * Each combination is identified by an auto-incrementing ID.
 *
 * Columns:
 * - id (INT): The unique identifier for the combination. This is the primary key.
 * - combination (VARCHAR(255)): A string representation of the combination. It cannot be null.
 */
CREATE TABLE IF NOT EXISTS combinations (
  id INT AUTO_INCREMENT PRIMARY KEY,
  combination VARCHAR(255) NOT NULL
);
/**
 * Table: responses
 *
 * This table stores responses associated with specific combinations.
 * Each response can be linked to one combination via the combination_id foreign key.
 *
 * Columns:
 * - id (INT): The unique identifier for the response. This is the primary key.
 * - combination_id (INT): The identifier of the combination this response relates to.
 *                         This is a foreign key referencing the combinations table.
 * - response (TEXT): The actual response text associated with the combination.
 */
CREATE TABLE IF NOT EXISTS responses (
  id INT AUTO_INCREMENT PRIMARY KEY,
  combination_id INT,
  response TEXT,
  FOREIGN KEY (combination_id) REFERENCES combinations(id)
);
/**
 * Table: items
 *
 * This table stores individual items that are part of the combinations.
 * Each item can be linked to a response via the response_id foreign key.
 *
 * Columns:
 * - id (INT): The unique identifier for the item. This is the primary key.
 * - item_name (VARCHAR(255)): The name of the item. It cannot be null.
 * - response_id (INT): The identifier of the response this item is associated with.
 *                      This is a foreign key referencing the responses table.
 */
CREATE TABLE IF NOT EXISTS items (
  id INT AUTO_INCREMENT PRIMARY KEY,
  item_name VARCHAR(255) NOT NULL,
  response_id INT,
  FOREIGN KEY (response_id) REFERENCES responses(id)
);
/**
 * Table: combination_items
 *
 * This table serves as a junction table to represent the many-to-many
 * relationship between combinations and items. Each record links a combination
 * to an item.
 *
 * Columns:
 * - combination_id (INT): The identifier of the combination. This is a foreign key
 *                         referencing the combinations table.
 * - item_id (INT): The identifier of the item. This is a foreign key referencing
 *                  the items table.
 *
 * Constraints:
 * - PRIMARY KEY (combination_id, item_id): The combination of combination_id and item_id
 *                                            serves as the primary key for the table,
 *                                            ensuring uniqueness.
 */
CREATE TABLE IF NOT EXISTS combination_items (
  combination_id INT,
  item_id INT,
  PRIMARY KEY (combination_id, item_id),
  FOREIGN KEY (combination_id) REFERENCES combinations(id),
  FOREIGN KEY (item_id) REFERENCES items(id)
);